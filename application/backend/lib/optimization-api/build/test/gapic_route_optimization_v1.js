"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const routeoptimizationModule = require("../src");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor
        .toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
(0, mocha_1.describe)('v1.RouteOptimizationClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has apiEndpoint', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'routeoptimization.googleapis.com');
        });
        (0, mocha_1.it)('has universeDomain', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });
        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            (0, mocha_1.it)('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = routeoptimizationModule.v1.RouteOptimizationClient.servicePath;
                assert.strictEqual(servicePath, 'routeoptimization.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
            (0, mocha_1.it)('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = routeoptimizationModule.v1.RouteOptimizationClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'routeoptimization.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        (0, mocha_1.it)('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({ universeDomain: 'example.com' });
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'routeoptimization.example.com');
        });
        (0, mocha_1.it)('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({ universe_domain: 'example.com' });
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'routeoptimization.example.com');
        });
        if (typeof process === 'object' && 'env' in process) {
            (0, mocha_1.describe)('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                (0, mocha_1.it)('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new routeoptimizationModule.v1.RouteOptimizationClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'routeoptimization.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    }
                    else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
                (0, mocha_1.it)('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new routeoptimizationModule.v1.RouteOptimizationClient({ universeDomain: 'configured.example.com' });
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'routeoptimization.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    }
                    else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        (0, mocha_1.it)('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new routeoptimizationModule.v1.RouteOptimizationClient({ universe_domain: 'example.com', universeDomain: 'example.net' }); });
        });
        (0, mocha_1.it)('has port', () => {
            const port = routeoptimizationModule.v1.RouteOptimizationClient.port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.routeOptimizationStub, undefined);
            await client.initialize();
            assert(client.routeOptimizationStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.routeOptimizationStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.routeOptimizationStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('optimizeTours', () => {
        (0, mocha_1.it)('invokes optimizeTours without error', async () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.maps.routeoptimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCall(expectedResponse);
            const [response] = await client.optimizeTours(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours without error using callback', async () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.maps.routeoptimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.optimizeTours(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours with error', async () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.maps.routeoptimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.optimizeTours = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.optimizeTours(request), expectedError);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours with closed client', async () => {
            const client = new routeoptimizationModule.v1.RouteOptimizationClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.maps.routeoptimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.maps.routeoptimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.optimizeTours(request), expectedError);
        });
    });
});
//# sourceMappingURL=gapic_route_optimization_v1.js.map