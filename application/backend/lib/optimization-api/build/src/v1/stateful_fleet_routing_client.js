"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatefulFleetRoutingClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/stateful_fleet_routing_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./stateful_fleet_routing_client_config.json");
const version = require('../../../package.json').version;
/**
 *  A service for managing fleet routing-related data and running optimizations
 *  of vehicle tours.
 * @class
 * @memberof v1
 */
class StatefulFleetRoutingClient {
    /**
     * Construct an instance of StatefulFleetRoutingClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new StatefulFleetRoutingClient({fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [
            `gax/${this._gaxModule.version}`,
            `gapic/${version}`,
        ];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            optimizerPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workspaces/{workspace}/optimizers/{optimizer}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            shipmentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workspaces/{workspace}/shipments/{shipment}'),
            solutionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workspaces/{workspace}/solutions/{solution}'),
            vehiclePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workspaces/{workspace}/vehicles/{vehicle}'),
            workspacePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/workspaces/{workspace}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listWorkspaces: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'workspaces'),
            listVehicles: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'vehicles'),
            listShipments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'shipments'),
            listSolutions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'solutions'),
            listOptimizers: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'optimizers')
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
        };
        if (opts.fallback === 'rest') {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [{ selector: 'google.longrunning.Operations.GetOperation', get: '/v1/{name=projects/*/operations/*}', additional_bindings: [{ get: '/v1/{name=projects/*/locations/*/operations/*}', }],
                }];
        }
        this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);
        const runOptimizerResponse = protoFilesRoot.lookup('.google.cloud.optimization.v1.RunOptimizerResponse');
        const runOptimizerMetadata = protoFilesRoot.lookup('.google.cloud.optimization.v1.RunOptimizerMetadata');
        this.descriptors.longrunning = {
            runOptimizer: new this._gaxModule.LongrunningDescriptor(this.operationsClient, runOptimizerResponse.decode.bind(runOptimizerResponse), runOptimizerMetadata.decode.bind(runOptimizerMetadata))
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.optimization.v1.StatefulFleetRouting', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.statefulFleetRoutingStub) {
            return this.statefulFleetRoutingStub;
        }
        // Put together the "service stub" for
        // google.cloud.optimization.v1.StatefulFleetRouting.
        this.statefulFleetRoutingStub = this._gaxGrpc.createStub(this._opts.fallback ?
            this._protos.lookupService('google.cloud.optimization.v1.StatefulFleetRouting') :
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this._protos.google.cloud.optimization.v1.StatefulFleetRouting, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const statefulFleetRoutingStubMethods = ['createWorkspace', 'listWorkspaces', 'updateWorkspace', 'deleteWorkspace', 'createVehicle', 'getVehicle', 'listVehicles', 'updateVehicle', 'deleteVehicle', 'createShipment', 'getShipment', 'listShipments', 'updateShipment', 'deleteShipment', 'getSolution', 'listSolutions', 'deleteSolution', 'retrieveInput', 'createOptimizer', 'getOptimizer', 'updateOptimizer', 'deleteOptimizer', 'listOptimizers', 'runOptimizer'];
        for (const methodName of statefulFleetRoutingStubMethods) {
            const callPromise = this.statefulFleetRoutingStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.statefulFleetRoutingStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'cloudoptimization.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'cloudoptimization.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform'
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createWorkspace(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.createWorkspace(request, options, callback);
    }
    updateWorkspace(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'workspace.name': (_a = request.workspace.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.updateWorkspace(request, options, callback);
    }
    deleteWorkspace(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.deleteWorkspace(request, options, callback);
    }
    createVehicle(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.createVehicle(request, options, callback);
    }
    getVehicle(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.getVehicle(request, options, callback);
    }
    updateVehicle(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'vehicle.name': (_a = request.vehicle.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.updateVehicle(request, options, callback);
    }
    deleteVehicle(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.deleteVehicle(request, options, callback);
    }
    createShipment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.createShipment(request, options, callback);
    }
    getShipment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.getShipment(request, options, callback);
    }
    updateShipment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'shipment.name': (_a = request.shipment.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.updateShipment(request, options, callback);
    }
    deleteShipment(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.deleteShipment(request, options, callback);
    }
    getSolution(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.getSolution(request, options, callback);
    }
    deleteSolution(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.deleteSolution(request, options, callback);
    }
    retrieveInput(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.retrieveInput(request, options, callback);
    }
    createOptimizer(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.createOptimizer(request, options, callback);
    }
    getOptimizer(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.getOptimizer(request, options, callback);
    }
    updateOptimizer(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'optimizer.name': (_a = request.optimizer.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.updateOptimizer(request, options, callback);
    }
    deleteOptimizer(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.deleteOptimizer(request, options, callback);
    }
    runOptimizer(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'name': (_a = request.name) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.runOptimizer(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `runOptimizer()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.run_optimizer.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_RunOptimizer_async
     */
    async checkRunOptimizerProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.runOptimizer, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listWorkspaces(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.listWorkspaces(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of workspaces.
     *   Format: "projects/{project}/locations/{location}"
     * @param {number} request.pageSize
     *   The maximum number of workspaces to return. The service may return fewer
     *   than this value. If unspecified, at most 50 workspaces will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkspaces` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListWorkspaces` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Workspaces to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Workspace]{@link google.cloud.optimization.v1.Workspace} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listWorkspacesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listWorkspacesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listWorkspaces'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkspaces.createStream(this.innerApiCalls.listWorkspaces, request, callSettings);
    }
    /**
     * Equivalent to `listWorkspaces`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of workspaces.
     *   Format: "projects/{project}/locations/{location}"
     * @param {number} request.pageSize
     *   The maximum number of workspaces to return. The service may return fewer
     *   than this value. If unspecified, at most 50 workspaces will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListWorkspaces` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListWorkspaces` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Workspaces to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Workspace]{@link google.cloud.optimization.v1.Workspace}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.list_workspaces.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_ListWorkspaces_async
     */
    listWorkspacesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listWorkspaces'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listWorkspaces.asyncIterate(this.innerApiCalls['listWorkspaces'], request, callSettings);
    }
    listVehicles(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.listVehicles(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of vehicles.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of vehicles to return. The service may return fewer
     *   than this value. If unspecified, at most 50 vehicles will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListVehicles` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListVehicles` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Vehicles to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Vehicle]{@link google.cloud.optimization.v1.Vehicle} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listVehiclesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listVehiclesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listVehicles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVehicles.createStream(this.innerApiCalls.listVehicles, request, callSettings);
    }
    /**
     * Equivalent to `listVehicles`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of vehicles.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of vehicles to return. The service may return fewer
     *   than this value. If unspecified, at most 50 vehicles will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListVehicles` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListVehicles` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Vehicles to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Vehicle]{@link google.cloud.optimization.v1.Vehicle}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.list_vehicles.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_ListVehicles_async
     */
    listVehiclesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listVehicles'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listVehicles.asyncIterate(this.innerApiCalls['listVehicles'], request, callSettings);
    }
    listShipments(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.listShipments(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of shipments.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of shipments to return. The service may return fewer
     *   than this value. If unspecified, at most 50 vehicles will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListShipments` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListShipments` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Shipments to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Shipment]{@link google.cloud.optimization.v1.Shipment} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listShipmentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listShipmentsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listShipments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listShipments.createStream(this.innerApiCalls.listShipments, request, callSettings);
    }
    /**
     * Equivalent to `listShipments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of shipments.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of shipments to return. The service may return fewer
     *   than this value. If unspecified, at most 50 vehicles will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListShipments` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListShipments` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Shipments to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Shipment]{@link google.cloud.optimization.v1.Shipment}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.list_shipments.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_ListShipments_async
     */
    listShipmentsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listShipments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listShipments.asyncIterate(this.innerApiCalls['listShipments'], request, callSettings);
    }
    listSolutions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.listSolutions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of solutions.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of solutions to return. The service may return fewer
     *   than this value. If unspecified, at most 50 solutions will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSolutions` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListSolutions` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Solutions to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Solution]{@link google.cloud.optimization.v1.Solution} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSolutionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listSolutionsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listSolutions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSolutions.createStream(this.innerApiCalls.listSolutions, request, callSettings);
    }
    /**
     * Equivalent to `listSolutions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of solutions.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of solutions to return. The service may return fewer
     *   than this value. If unspecified, at most 50 solutions will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListSolutions` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListSolutions` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Solutions to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Solution]{@link google.cloud.optimization.v1.Solution}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.list_solutions.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_ListSolutions_async
     */
    listSolutionsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listSolutions'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSolutions.asyncIterate(this.innerApiCalls['listSolutions'], request, callSettings);
    }
    listOptimizers(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        this.initialize();
        return this.innerApiCalls.listOptimizers(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of optimizers.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of optimizers to return. The service may return fewer
     *   than this value. If unspecified, at most 50 optimizers will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListOptimizers` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListOptimizers` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Optimizers to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Optimizer]{@link google.cloud.optimization.v1.Optimizer} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listOptimizersAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listOptimizersStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listOptimizers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listOptimizers.createStream(this.innerApiCalls.listOptimizers, request, callSettings);
    }
    /**
     * Equivalent to `listOptimizers`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent, which owns this collection of optimizers.
     *   Format: "projects/{project}/locations/{location}/workspaces/{workspace}"
     * @param {number} request.pageSize
     *   The maximum number of optimizers to return. The service may return fewer
     *   than this value. If unspecified, at most 50 optimizers will be returned.
     *   The maximum value is 100; values above 100 will be coerced to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous `ListOptimizers` call.
     *   Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other parameters provided to `ListOptimizers` must
     *   match the call that provided the page token.
     * @param {string} request.filter
     *   Filter expression that matches a subset of the Optimizers to show.
     *   https://google.aip.dev/160.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Optimizer]{@link google.cloud.optimization.v1.Optimizer}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/stateful_fleet_routing.list_optimizers.js</caption>
     * region_tag:cloudoptimization_v1_generated_StatefulFleetRouting_ListOptimizers_async
     */
    listOptimizersAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({
            'parent': (_a = request.parent) !== null && _a !== void 0 ? _a : '',
        });
        const defaultCallSettings = this._defaults['listOptimizers'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listOptimizers.asyncIterate(this.innerApiCalls['listOptimizers'], request, callSettings);
    }
    /**
       * Gets the latest state of a long-running operation.  Clients can use this
       * method to poll the operation result at intervals as recommended by the API
       * service.
       *
       * @param {Object} request - The request object that will be sent.
       * @param {string} request.name - The name of the operation resource.
       * @param {Object=} options
       *   Optional parameters. You can override the default settings for this call,
       *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
       *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
       *   details.
       * @param {function(?Error, ?Object)=} callback
       *   The function which will be called with the result of the API call.
       *
       *   The second parameter to the callback is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}.
       * @return {Promise} - The promise which resolves to an array.
       *   The first element of the array is an object representing
       * [google.longrunning.Operation]{@link
       * external:"google.longrunning.Operation"}. The promise has a method named
       * "cancel" which cancels the ongoing API call.
       *
       * @example
       * ```
       * const client = longrunning.operationsClient();
       * const name = '';
       * const [response] = await client.getOperation({name});
       * // doThingsWith(response)
       * ```
       */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified optimizer resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workspace
     * @param {string} optimizer
     * @returns {string} Resource name string.
     */
    optimizerPath(project, location, workspace, optimizer) {
        return this.pathTemplates.optimizerPathTemplate.render({
            project: project,
            location: location,
            workspace: workspace,
            optimizer: optimizer,
        });
    }
    /**
     * Parse the project from Optimizer resource.
     *
     * @param {string} optimizerName
     *   A fully-qualified path representing Optimizer resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromOptimizerName(optimizerName) {
        return this.pathTemplates.optimizerPathTemplate.match(optimizerName).project;
    }
    /**
     * Parse the location from Optimizer resource.
     *
     * @param {string} optimizerName
     *   A fully-qualified path representing Optimizer resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromOptimizerName(optimizerName) {
        return this.pathTemplates.optimizerPathTemplate.match(optimizerName).location;
    }
    /**
     * Parse the workspace from Optimizer resource.
     *
     * @param {string} optimizerName
     *   A fully-qualified path representing Optimizer resource.
     * @returns {string} A string representing the workspace.
     */
    matchWorkspaceFromOptimizerName(optimizerName) {
        return this.pathTemplates.optimizerPathTemplate.match(optimizerName).workspace;
    }
    /**
     * Parse the optimizer from Optimizer resource.
     *
     * @param {string} optimizerName
     *   A fully-qualified path representing Optimizer resource.
     * @returns {string} A string representing the optimizer.
     */
    matchOptimizerFromOptimizerName(optimizerName) {
        return this.pathTemplates.optimizerPathTemplate.match(optimizerName).optimizer;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified shipment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workspace
     * @param {string} shipment
     * @returns {string} Resource name string.
     */
    shipmentPath(project, location, workspace, shipment) {
        return this.pathTemplates.shipmentPathTemplate.render({
            project: project,
            location: location,
            workspace: workspace,
            shipment: shipment,
        });
    }
    /**
     * Parse the project from Shipment resource.
     *
     * @param {string} shipmentName
     *   A fully-qualified path representing Shipment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromShipmentName(shipmentName) {
        return this.pathTemplates.shipmentPathTemplate.match(shipmentName).project;
    }
    /**
     * Parse the location from Shipment resource.
     *
     * @param {string} shipmentName
     *   A fully-qualified path representing Shipment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromShipmentName(shipmentName) {
        return this.pathTemplates.shipmentPathTemplate.match(shipmentName).location;
    }
    /**
     * Parse the workspace from Shipment resource.
     *
     * @param {string} shipmentName
     *   A fully-qualified path representing Shipment resource.
     * @returns {string} A string representing the workspace.
     */
    matchWorkspaceFromShipmentName(shipmentName) {
        return this.pathTemplates.shipmentPathTemplate.match(shipmentName).workspace;
    }
    /**
     * Parse the shipment from Shipment resource.
     *
     * @param {string} shipmentName
     *   A fully-qualified path representing Shipment resource.
     * @returns {string} A string representing the shipment.
     */
    matchShipmentFromShipmentName(shipmentName) {
        return this.pathTemplates.shipmentPathTemplate.match(shipmentName).shipment;
    }
    /**
     * Return a fully-qualified solution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workspace
     * @param {string} solution
     * @returns {string} Resource name string.
     */
    solutionPath(project, location, workspace, solution) {
        return this.pathTemplates.solutionPathTemplate.render({
            project: project,
            location: location,
            workspace: workspace,
            solution: solution,
        });
    }
    /**
     * Parse the project from Solution resource.
     *
     * @param {string} solutionName
     *   A fully-qualified path representing Solution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSolutionName(solutionName) {
        return this.pathTemplates.solutionPathTemplate.match(solutionName).project;
    }
    /**
     * Parse the location from Solution resource.
     *
     * @param {string} solutionName
     *   A fully-qualified path representing Solution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSolutionName(solutionName) {
        return this.pathTemplates.solutionPathTemplate.match(solutionName).location;
    }
    /**
     * Parse the workspace from Solution resource.
     *
     * @param {string} solutionName
     *   A fully-qualified path representing Solution resource.
     * @returns {string} A string representing the workspace.
     */
    matchWorkspaceFromSolutionName(solutionName) {
        return this.pathTemplates.solutionPathTemplate.match(solutionName).workspace;
    }
    /**
     * Parse the solution from Solution resource.
     *
     * @param {string} solutionName
     *   A fully-qualified path representing Solution resource.
     * @returns {string} A string representing the solution.
     */
    matchSolutionFromSolutionName(solutionName) {
        return this.pathTemplates.solutionPathTemplate.match(solutionName).solution;
    }
    /**
     * Return a fully-qualified vehicle resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workspace
     * @param {string} vehicle
     * @returns {string} Resource name string.
     */
    vehiclePath(project, location, workspace, vehicle) {
        return this.pathTemplates.vehiclePathTemplate.render({
            project: project,
            location: location,
            workspace: workspace,
            vehicle: vehicle,
        });
    }
    /**
     * Parse the project from Vehicle resource.
     *
     * @param {string} vehicleName
     *   A fully-qualified path representing Vehicle resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromVehicleName(vehicleName) {
        return this.pathTemplates.vehiclePathTemplate.match(vehicleName).project;
    }
    /**
     * Parse the location from Vehicle resource.
     *
     * @param {string} vehicleName
     *   A fully-qualified path representing Vehicle resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromVehicleName(vehicleName) {
        return this.pathTemplates.vehiclePathTemplate.match(vehicleName).location;
    }
    /**
     * Parse the workspace from Vehicle resource.
     *
     * @param {string} vehicleName
     *   A fully-qualified path representing Vehicle resource.
     * @returns {string} A string representing the workspace.
     */
    matchWorkspaceFromVehicleName(vehicleName) {
        return this.pathTemplates.vehiclePathTemplate.match(vehicleName).workspace;
    }
    /**
     * Parse the vehicle from Vehicle resource.
     *
     * @param {string} vehicleName
     *   A fully-qualified path representing Vehicle resource.
     * @returns {string} A string representing the vehicle.
     */
    matchVehicleFromVehicleName(vehicleName) {
        return this.pathTemplates.vehiclePathTemplate.match(vehicleName).vehicle;
    }
    /**
     * Return a fully-qualified workspace resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} workspace
     * @returns {string} Resource name string.
     */
    workspacePath(project, location, workspace) {
        return this.pathTemplates.workspacePathTemplate.render({
            project: project,
            location: location,
            workspace: workspace,
        });
    }
    /**
     * Parse the project from Workspace resource.
     *
     * @param {string} workspaceName
     *   A fully-qualified path representing Workspace resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromWorkspaceName(workspaceName) {
        return this.pathTemplates.workspacePathTemplate.match(workspaceName).project;
    }
    /**
     * Parse the location from Workspace resource.
     *
     * @param {string} workspaceName
     *   A fully-qualified path representing Workspace resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromWorkspaceName(workspaceName) {
        return this.pathTemplates.workspacePathTemplate.match(workspaceName).location;
    }
    /**
     * Parse the workspace from Workspace resource.
     *
     * @param {string} workspaceName
     *   A fully-qualified path representing Workspace resource.
     * @returns {string} A string representing the workspace.
     */
    matchWorkspaceFromWorkspaceName(workspaceName) {
        return this.pathTemplates.workspacePathTemplate.match(workspaceName).workspace;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.statefulFleetRoutingStub && !this._terminated) {
            return this.statefulFleetRoutingStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.StatefulFleetRoutingClient = StatefulFleetRoutingClient;
//# sourceMappingURL=stateful_fleet_routing_client.js.map