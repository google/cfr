"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const fleetroutingModule = require("../src");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor
        .toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
function stubLongRunningCall(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}
function stubLongRunningCallWithCallback(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}
(0, mocha_1.describe)('v1.FleetRoutingClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has servicePath', () => {
            const servicePath = fleetroutingModule.v1.FleetRoutingClient.servicePath;
            assert(servicePath);
        });
        (0, mocha_1.it)('has apiEndpoint', () => {
            const apiEndpoint = fleetroutingModule.v1.FleetRoutingClient.apiEndpoint;
            assert(apiEndpoint);
        });
        (0, mocha_1.it)('has port', () => {
            const port = fleetroutingModule.v1.FleetRoutingClient.port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.fleetRoutingStub, undefined);
            await client.initialize();
            assert(client.fleetRoutingStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.fleetRoutingStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.fleetRoutingStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('optimizeTours', () => {
        (0, mocha_1.it)('invokes optimizeTours without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCall(expectedResponse);
            const [response] = await client.optimizeTours(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursResponse());
            client.innerApiCalls.optimizeTours = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.optimizeTours(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.optimizeTours = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.optimizeTours(request), expectedError);
            const actualRequest = client.innerApiCalls.optimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.optimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes optimizeTours with closed client', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.OptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.OptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.optimizeTours(request), expectedError);
        });
    });
    (0, mocha_1.describe)('batchOptimizeTours', () => {
        (0, mocha_1.it)('invokes batchOptimizeTours without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.BatchOptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(expectedResponse);
            const [operation] = await client.batchOptimizeTours(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.BatchOptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.batchOptimizeTours(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = await promise;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours with call error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.BatchOptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.batchOptimizeTours(request), expectedError);
            const actualRequest = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes batchOptimizeTours with LRO error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.BatchOptimizeToursRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.BatchOptimizeToursRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.batchOptimizeTours = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.batchOptimizeTours(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.batchOptimizeTours
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes checkBatchOptimizeToursProgress without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkBatchOptimizeToursProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes checkBatchOptimizeToursProgress with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkBatchOptimizeToursProgress(''), expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0));
        });
    });
    (0, mocha_1.describe)('getOperation', () => {
        (0, mocha_1.it)('invokes getOperation without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.getOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes getOperation without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.getOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.getOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes getOperation with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.getOperation(request); }, expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('cancelOperation', () => {
        (0, mocha_1.it)('invokes cancelOperation without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.cancelOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes cancelOperation without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.cancelOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.cancelOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes cancelOperation with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.cancelOperation(request); }, expectedError);
            assert(client.operationsClient.cancelOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('deleteOperation', () => {
        (0, mocha_1.it)('invokes deleteOperation without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.deleteOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes deleteOperation without error using callback', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.deleteOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.deleteOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes deleteOperation with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.deleteOperation(request); }, expectedError);
            assert(client.operationsClient.deleteOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('listOperationsAsync', () => {
        (0, mocha_1.it)('uses async iteration with listOperations without error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedResponse = [
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations.asyncIterate
                .getCall(0).args[1], request);
        });
        (0, mocha_1.it)('uses async iteration with listOperations with error', async () => {
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations.asyncIterate
                .getCall(0).args[1], request);
        });
    });
    (0, mocha_1.describe)('Path templates', () => {
        (0, mocha_1.describe)('optimizer', () => {
            const fakePath = "/rendered/path/optimizer";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                optimizer: "optimizerValue",
            };
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.optimizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.optimizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('optimizerPath', () => {
                const result = client.optimizerPath("projectValue", "locationValue", "workspaceValue", "optimizerValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.optimizerPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromOptimizerName', () => {
                const result = client.matchProjectFromOptimizerName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromOptimizerName', () => {
                const result = client.matchLocationFromOptimizerName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromOptimizerName', () => {
                const result = client.matchWorkspaceFromOptimizerName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchOptimizerFromOptimizerName', () => {
                const result = client.matchOptimizerFromOptimizerName(fakePath);
                assert.strictEqual(result, "optimizerValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('shipment', () => {
            const fakePath = "/rendered/path/shipment";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                shipment: "shipmentValue",
            };
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shipmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shipmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('shipmentPath', () => {
                const result = client.shipmentPath("projectValue", "locationValue", "workspaceValue", "shipmentValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.shipmentPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromShipmentName', () => {
                const result = client.matchProjectFromShipmentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromShipmentName', () => {
                const result = client.matchLocationFromShipmentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromShipmentName', () => {
                const result = client.matchWorkspaceFromShipmentName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchShipmentFromShipmentName', () => {
                const result = client.matchShipmentFromShipmentName(fakePath);
                assert.strictEqual(result, "shipmentValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('solution', () => {
            const fakePath = "/rendered/path/solution";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                solution: "solutionValue",
            };
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.solutionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.solutionPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('solutionPath', () => {
                const result = client.solutionPath("projectValue", "locationValue", "workspaceValue", "solutionValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.solutionPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromSolutionName', () => {
                const result = client.matchProjectFromSolutionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromSolutionName', () => {
                const result = client.matchLocationFromSolutionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromSolutionName', () => {
                const result = client.matchWorkspaceFromSolutionName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchSolutionFromSolutionName', () => {
                const result = client.matchSolutionFromSolutionName(fakePath);
                assert.strictEqual(result, "solutionValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('vehicle', () => {
            const fakePath = "/rendered/path/vehicle";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                vehicle: "vehicleValue",
            };
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.vehiclePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.vehiclePathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('vehiclePath', () => {
                const result = client.vehiclePath("projectValue", "locationValue", "workspaceValue", "vehicleValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.vehiclePathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromVehicleName', () => {
                const result = client.matchProjectFromVehicleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromVehicleName', () => {
                const result = client.matchLocationFromVehicleName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromVehicleName', () => {
                const result = client.matchWorkspaceFromVehicleName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchVehicleFromVehicleName', () => {
                const result = client.matchVehicleFromVehicleName(fakePath);
                assert.strictEqual(result, "vehicleValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('workspace', () => {
            const fakePath = "/rendered/path/workspace";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
            };
            const client = new fleetroutingModule.v1.FleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workspacePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workspacePathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('workspacePath', () => {
                const result = client.workspacePath("projectValue", "locationValue", "workspaceValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.workspacePathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromWorkspaceName', () => {
                const result = client.matchProjectFromWorkspaceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromWorkspaceName', () => {
                const result = client.matchLocationFromWorkspaceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromWorkspaceName', () => {
                const result = client.matchWorkspaceFromWorkspaceName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
//# sourceMappingURL=gapic_fleet_routing_v1.js.map