"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/protos");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const statefulfleetroutingModule = require("../src");
const stream_1 = require("stream");
const google_gax_1 = require("google-gax");
// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = google_gax_1.protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName, fields) {
    var _a, _b;
    let type = root.lookupType(typeName);
    for (const field of fields.slice(0, -1)) {
        type = (_a = type.fields[field]) === null || _a === void 0 ? void 0 : _a.resolvedType;
    }
    return (_b = type.fields[fields[fields.length - 1]]) === null || _b === void 0 ? void 0 : _b.defaultValue;
}
function generateSampleMessage(instance) {
    const filledObject = instance.constructor
        .toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}
function stubLongRunningCall(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().rejects(callError) : sinon.stub().resolves([mockOperation]);
}
function stubLongRunningCallWithCallback(response, callError, lroError) {
    const innerStub = lroError ? sinon.stub().rejects(lroError) : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError ? sinon.stub().callsArgWith(2, callError) : sinon.stub().callsArgWith(2, null, mockOperation);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    }
    else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}
(0, mocha_1.describe)('v1.StatefulFleetRoutingClient', () => {
    (0, mocha_1.describe)('Common methods', () => {
        (0, mocha_1.it)('has servicePath', () => {
            const servicePath = statefulfleetroutingModule.v1.StatefulFleetRoutingClient.servicePath;
            assert(servicePath);
        });
        (0, mocha_1.it)('has apiEndpoint', () => {
            const apiEndpoint = statefulfleetroutingModule.v1.StatefulFleetRoutingClient.apiEndpoint;
            assert(apiEndpoint);
        });
        (0, mocha_1.it)('has port', () => {
            const port = statefulfleetroutingModule.v1.StatefulFleetRoutingClient.port;
            assert(port);
            assert(typeof port === 'number');
        });
        (0, mocha_1.it)('should create a client with no option', () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient();
            assert(client);
        });
        (0, mocha_1.it)('should create a client with gRPC fallback', () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                fallback: true,
            });
            assert(client);
        });
        (0, mocha_1.it)('has initialize method and supports deferred initialization', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.statefulFleetRoutingStub, undefined);
            await client.initialize();
            assert(client.statefulFleetRoutingStub);
        });
        (0, mocha_1.it)('has close method for the initialized client', done => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            assert(client.statefulFleetRoutingStub);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has close method for the non-initialized client', done => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            assert.strictEqual(client.statefulFleetRoutingStub, undefined);
            client.close().then(() => {
                done();
            });
        });
        (0, mocha_1.it)('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert(client.auth.getProjectId.calledWithExactly());
        });
        (0, mocha_1.it)('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err, projectId) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });
    (0, mocha_1.describe)('createWorkspace', () => {
        (0, mocha_1.it)('invokes createWorkspace without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateWorkspaceRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace());
            client.innerApiCalls.createWorkspace = stubSimpleCall(expectedResponse);
            const [response] = await client.createWorkspace(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createWorkspace without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateWorkspaceRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace());
            client.innerApiCalls.createWorkspace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createWorkspace(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createWorkspace with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateWorkspaceRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createWorkspace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createWorkspace(request), expectedError);
            const actualRequest = client.innerApiCalls.createWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createWorkspace with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateWorkspaceRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createWorkspace(request), expectedError);
        });
    });
    (0, mocha_1.describe)('updateWorkspace', () => {
        (0, mocha_1.it)('invokes updateWorkspace without error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateWorkspaceRequest());
            (_a = request.workspace) !== null && _a !== void 0 ? _a : (request.workspace = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateWorkspaceRequest', ['workspace', 'name']);
            request.workspace.name = defaultValue1;
            const expectedHeaderRequestParams = `workspace.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace());
            client.innerApiCalls.updateWorkspace = stubSimpleCall(expectedResponse);
            const [response] = await client.updateWorkspace(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateWorkspace without error using callback', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateWorkspaceRequest());
            (_a = request.workspace) !== null && _a !== void 0 ? _a : (request.workspace = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateWorkspaceRequest', ['workspace', 'name']);
            request.workspace.name = defaultValue1;
            const expectedHeaderRequestParams = `workspace.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace());
            client.innerApiCalls.updateWorkspace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateWorkspace(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateWorkspace with error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateWorkspaceRequest());
            (_a = request.workspace) !== null && _a !== void 0 ? _a : (request.workspace = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateWorkspaceRequest', ['workspace', 'name']);
            request.workspace.name = defaultValue1;
            const expectedHeaderRequestParams = `workspace.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWorkspace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateWorkspace(request), expectedError);
            const actualRequest = client.innerApiCalls.updateWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateWorkspace with closed client', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateWorkspaceRequest());
            (_a = request.workspace) !== null && _a !== void 0 ? _a : (request.workspace = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateWorkspaceRequest', ['workspace', 'name']);
            request.workspace.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateWorkspace(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteWorkspace', () => {
        (0, mocha_1.it)('invokes deleteWorkspace without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteWorkspaceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteWorkspace = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteWorkspace(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteWorkspace without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteWorkspaceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteWorkspace = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteWorkspace(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteWorkspace with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteWorkspaceRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWorkspace = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteWorkspace(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteWorkspace
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteWorkspace with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteWorkspaceRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteWorkspaceRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteWorkspace(request), expectedError);
        });
    });
    (0, mocha_1.describe)('createVehicle', () => {
        (0, mocha_1.it)('invokes createVehicle without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateVehicleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.createVehicle = stubSimpleCall(expectedResponse);
            const [response] = await client.createVehicle(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createVehicle without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateVehicleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.createVehicle = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createVehicle(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createVehicle with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateVehicleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createVehicle = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createVehicle(request), expectedError);
            const actualRequest = client.innerApiCalls.createVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createVehicle with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateVehicleRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createVehicle(request), expectedError);
        });
    });
    (0, mocha_1.describe)('getVehicle', () => {
        (0, mocha_1.it)('invokes getVehicle without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.getVehicle = stubSimpleCall(expectedResponse);
            const [response] = await client.getVehicle(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getVehicle without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.getVehicle = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getVehicle(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getVehicle with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getVehicle = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getVehicle(request), expectedError);
            const actualRequest = client.innerApiCalls.getVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getVehicle with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getVehicle(request), expectedError);
        });
    });
    (0, mocha_1.describe)('updateVehicle', () => {
        (0, mocha_1.it)('invokes updateVehicle without error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateVehicleRequest());
            (_a = request.vehicle) !== null && _a !== void 0 ? _a : (request.vehicle = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateVehicleRequest', ['vehicle', 'name']);
            request.vehicle.name = defaultValue1;
            const expectedHeaderRequestParams = `vehicle.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.updateVehicle = stubSimpleCall(expectedResponse);
            const [response] = await client.updateVehicle(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateVehicle without error using callback', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateVehicleRequest());
            (_a = request.vehicle) !== null && _a !== void 0 ? _a : (request.vehicle = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateVehicleRequest', ['vehicle', 'name']);
            request.vehicle.name = defaultValue1;
            const expectedHeaderRequestParams = `vehicle.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle());
            client.innerApiCalls.updateVehicle = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateVehicle(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateVehicle with error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateVehicleRequest());
            (_a = request.vehicle) !== null && _a !== void 0 ? _a : (request.vehicle = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateVehicleRequest', ['vehicle', 'name']);
            request.vehicle.name = defaultValue1;
            const expectedHeaderRequestParams = `vehicle.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateVehicle = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateVehicle(request), expectedError);
            const actualRequest = client.innerApiCalls.updateVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateVehicle with closed client', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateVehicleRequest());
            (_a = request.vehicle) !== null && _a !== void 0 ? _a : (request.vehicle = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateVehicleRequest', ['vehicle', 'name']);
            request.vehicle.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateVehicle(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteVehicle', () => {
        (0, mocha_1.it)('invokes deleteVehicle without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteVehicle = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteVehicle(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteVehicle without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteVehicle = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteVehicle(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteVehicle with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteVehicle = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteVehicle(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteVehicle
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteVehicle
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteVehicle with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteVehicleRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteVehicleRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteVehicle(request), expectedError);
        });
    });
    (0, mocha_1.describe)('createShipment', () => {
        (0, mocha_1.it)('invokes createShipment without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateShipmentRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.createShipment = stubSimpleCall(expectedResponse);
            const [response] = await client.createShipment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createShipment without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateShipmentRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.createShipment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createShipment(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createShipment with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateShipmentRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createShipment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createShipment(request), expectedError);
            const actualRequest = client.innerApiCalls.createShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createShipment with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateShipmentRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createShipment(request), expectedError);
        });
    });
    (0, mocha_1.describe)('getShipment', () => {
        (0, mocha_1.it)('invokes getShipment without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.getShipment = stubSimpleCall(expectedResponse);
            const [response] = await client.getShipment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getShipment without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.getShipment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getShipment(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getShipment with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getShipment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getShipment(request), expectedError);
            const actualRequest = client.innerApiCalls.getShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getShipment with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getShipment(request), expectedError);
        });
    });
    (0, mocha_1.describe)('updateShipment', () => {
        (0, mocha_1.it)('invokes updateShipment without error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateShipmentRequest());
            (_a = request.shipment) !== null && _a !== void 0 ? _a : (request.shipment = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateShipmentRequest', ['shipment', 'name']);
            request.shipment.name = defaultValue1;
            const expectedHeaderRequestParams = `shipment.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.updateShipment = stubSimpleCall(expectedResponse);
            const [response] = await client.updateShipment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateShipment without error using callback', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateShipmentRequest());
            (_a = request.shipment) !== null && _a !== void 0 ? _a : (request.shipment = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateShipmentRequest', ['shipment', 'name']);
            request.shipment.name = defaultValue1;
            const expectedHeaderRequestParams = `shipment.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment());
            client.innerApiCalls.updateShipment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateShipment(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateShipment with error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateShipmentRequest());
            (_a = request.shipment) !== null && _a !== void 0 ? _a : (request.shipment = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateShipmentRequest', ['shipment', 'name']);
            request.shipment.name = defaultValue1;
            const expectedHeaderRequestParams = `shipment.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateShipment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateShipment(request), expectedError);
            const actualRequest = client.innerApiCalls.updateShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateShipment with closed client', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateShipmentRequest());
            (_a = request.shipment) !== null && _a !== void 0 ? _a : (request.shipment = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateShipmentRequest', ['shipment', 'name']);
            request.shipment.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateShipment(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteShipment', () => {
        (0, mocha_1.it)('invokes deleteShipment without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteShipment = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteShipment(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteShipment without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteShipment = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteShipment(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteShipment with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteShipment = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteShipment(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteShipment
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteShipment
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteShipment with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteShipmentRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteShipmentRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteShipment(request), expectedError);
        });
    });
    (0, mocha_1.describe)('getSolution', () => {
        (0, mocha_1.it)('invokes getSolution without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Solution());
            client.innerApiCalls.getSolution = stubSimpleCall(expectedResponse);
            const [response] = await client.getSolution(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSolution without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Solution());
            client.innerApiCalls.getSolution = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getSolution(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSolution with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getSolution = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getSolution(request), expectedError);
            const actualRequest = client.innerApiCalls.getSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getSolution with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getSolution(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteSolution', () => {
        (0, mocha_1.it)('invokes deleteSolution without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSolution = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteSolution(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSolution without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteSolution = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteSolution(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSolution with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteSolution = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteSolution(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteSolution
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteSolution
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteSolution with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteSolutionRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteSolutionRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteSolution(request), expectedError);
        });
    });
    (0, mocha_1.describe)('retrieveInput', () => {
        (0, mocha_1.it)('invokes retrieveInput without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RetrieveInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputResponse());
            client.innerApiCalls.retrieveInput = stubSimpleCall(expectedResponse);
            const [response] = await client.retrieveInput(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.retrieveInput
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.retrieveInput
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes retrieveInput without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RetrieveInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputResponse());
            client.innerApiCalls.retrieveInput = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.retrieveInput(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.retrieveInput
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.retrieveInput
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes retrieveInput with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RetrieveInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.retrieveInput = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.retrieveInput(request), expectedError);
            const actualRequest = client.innerApiCalls.retrieveInput
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.retrieveInput
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes retrieveInput with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RetrieveInputRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RetrieveInputRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.retrieveInput(request), expectedError);
        });
    });
    (0, mocha_1.describe)('createOptimizer', () => {
        (0, mocha_1.it)('invokes createOptimizer without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateOptimizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.createOptimizer = stubSimpleCall(expectedResponse);
            const [response] = await client.createOptimizer(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createOptimizer without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateOptimizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.createOptimizer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createOptimizer(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.createOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createOptimizer with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateOptimizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.createOptimizer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createOptimizer(request), expectedError);
            const actualRequest = client.innerApiCalls.createOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.createOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes createOptimizer with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.CreateOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.CreateOptimizerRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.createOptimizer(request), expectedError);
        });
    });
    (0, mocha_1.describe)('getOptimizer', () => {
        (0, mocha_1.it)('invokes getOptimizer without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.getOptimizer = stubSimpleCall(expectedResponse);
            const [response] = await client.getOptimizer(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOptimizer without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.getOptimizer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getOptimizer(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.getOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOptimizer with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.getOptimizer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getOptimizer(request), expectedError);
            const actualRequest = client.innerApiCalls.getOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.getOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes getOptimizer with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.GetOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.GetOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.getOptimizer(request), expectedError);
        });
    });
    (0, mocha_1.describe)('updateOptimizer', () => {
        (0, mocha_1.it)('invokes updateOptimizer without error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateOptimizerRequest());
            (_a = request.optimizer) !== null && _a !== void 0 ? _a : (request.optimizer = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateOptimizerRequest', ['optimizer', 'name']);
            request.optimizer.name = defaultValue1;
            const expectedHeaderRequestParams = `optimizer.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.updateOptimizer = stubSimpleCall(expectedResponse);
            const [response] = await client.updateOptimizer(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateOptimizer without error using callback', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateOptimizerRequest());
            (_a = request.optimizer) !== null && _a !== void 0 ? _a : (request.optimizer = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateOptimizerRequest', ['optimizer', 'name']);
            request.optimizer.name = defaultValue1;
            const expectedHeaderRequestParams = `optimizer.name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer());
            client.innerApiCalls.updateOptimizer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateOptimizer(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.updateOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateOptimizer with error', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateOptimizerRequest());
            (_a = request.optimizer) !== null && _a !== void 0 ? _a : (request.optimizer = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateOptimizerRequest', ['optimizer', 'name']);
            request.optimizer.name = defaultValue1;
            const expectedHeaderRequestParams = `optimizer.name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.updateOptimizer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateOptimizer(request), expectedError);
            const actualRequest = client.innerApiCalls.updateOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.updateOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes updateOptimizer with closed client', async () => {
            var _a;
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.UpdateOptimizerRequest());
            (_a = request.optimizer) !== null && _a !== void 0 ? _a : (request.optimizer = {});
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.UpdateOptimizerRequest', ['optimizer', 'name']);
            request.optimizer.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.updateOptimizer(request), expectedError);
        });
    });
    (0, mocha_1.describe)('deleteOptimizer', () => {
        (0, mocha_1.it)('invokes deleteOptimizer without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteOptimizer = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteOptimizer(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteOptimizer without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteOptimizer = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteOptimizer(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteOptimizer with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteOptimizer = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteOptimizer(request), expectedError);
            const actualRequest = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.deleteOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes deleteOptimizer with closed client', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.DeleteOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.DeleteOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.deleteOptimizer(request), expectedError);
        });
    });
    (0, mocha_1.describe)('runOptimizer', () => {
        (0, mocha_1.it)('invokes runOptimizer without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RunOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RunOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.runOptimizer = stubLongRunningCall(expectedResponse);
            const [operation] = await client.runOptimizer(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runOptimizer without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RunOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RunOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.runOptimizer = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.runOptimizer(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = await promise;
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.runOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runOptimizer with call error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RunOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RunOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.runOptimizer = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.runOptimizer(request), expectedError);
            const actualRequest = client.innerApiCalls.runOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes runOptimizer with LRO error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.RunOptimizerRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.RunOptimizerRequest', ['name']);
            request.name = defaultValue1;
            const expectedHeaderRequestParams = `name=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.runOptimizer = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.runOptimizer(request);
            await assert.rejects(operation.promise(), expectedError);
            const actualRequest = client.innerApiCalls.runOptimizer
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.runOptimizer
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes checkRunOptimizerProgress without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkRunOptimizerProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        (0, mocha_1.it)('invokes checkRunOptimizerProgress with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkRunOptimizerProgress(''), expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0));
        });
    });
    (0, mocha_1.describe)('listWorkspaces', () => {
        (0, mocha_1.it)('invokes listWorkspaces without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
            ];
            client.innerApiCalls.listWorkspaces = stubSimpleCall(expectedResponse);
            const [response] = await client.listWorkspaces(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listWorkspaces
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listWorkspaces
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listWorkspaces without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
            ];
            client.innerApiCalls.listWorkspaces = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listWorkspaces(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listWorkspaces
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listWorkspaces
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listWorkspaces with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listWorkspaces = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWorkspaces(request), expectedError);
            const actualRequest = client.innerApiCalls.listWorkspaces
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listWorkspaces
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listWorkspacesStream without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
            ];
            client.descriptors.page.listWorkspaces.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listWorkspacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listWorkspaces.createStream
                .getCall(0).calledWith(client.innerApiCalls.listWorkspaces, request));
            assert(client.descriptors.page.listWorkspaces.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listWorkspacesStream with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listWorkspaces.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listWorkspacesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listWorkspaces.createStream
                .getCall(0).calledWith(client.innerApiCalls.listWorkspaces, request));
            assert(client.descriptors.page.listWorkspaces.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listWorkspaces without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Workspace()),
            ];
            client.descriptors.page.listWorkspaces.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listWorkspacesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listWorkspaces.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listWorkspaces.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listWorkspaces with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListWorkspacesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListWorkspacesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listWorkspaces.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listWorkspacesAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listWorkspaces.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listWorkspaces.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('listVehicles', () => {
        (0, mocha_1.it)('invokes listVehicles without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
            ];
            client.innerApiCalls.listVehicles = stubSimpleCall(expectedResponse);
            const [response] = await client.listVehicles(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listVehicles
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listVehicles
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listVehicles without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
            ];
            client.innerApiCalls.listVehicles = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listVehicles(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listVehicles
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listVehicles
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listVehicles with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listVehicles = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listVehicles(request), expectedError);
            const actualRequest = client.innerApiCalls.listVehicles
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listVehicles
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listVehiclesStream without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
            ];
            client.descriptors.page.listVehicles.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listVehiclesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listVehicles.createStream
                .getCall(0).calledWith(client.innerApiCalls.listVehicles, request));
            assert(client.descriptors.page.listVehicles.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listVehiclesStream with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listVehicles.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listVehiclesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listVehicles.createStream
                .getCall(0).calledWith(client.innerApiCalls.listVehicles, request));
            assert(client.descriptors.page.listVehicles.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listVehicles without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Vehicle()),
            ];
            client.descriptors.page.listVehicles.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listVehiclesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listVehicles.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listVehicles.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listVehicles with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListVehiclesRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListVehiclesRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listVehicles.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listVehiclesAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listVehicles.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listVehicles.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('listShipments', () => {
        (0, mocha_1.it)('invokes listShipments without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
            ];
            client.innerApiCalls.listShipments = stubSimpleCall(expectedResponse);
            const [response] = await client.listShipments(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listShipments
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listShipments
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listShipments without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
            ];
            client.innerApiCalls.listShipments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listShipments(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listShipments
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listShipments
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listShipments with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listShipments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listShipments(request), expectedError);
            const actualRequest = client.innerApiCalls.listShipments
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listShipments
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listShipmentsStream without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
            ];
            client.descriptors.page.listShipments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listShipmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listShipments.createStream
                .getCall(0).calledWith(client.innerApiCalls.listShipments, request));
            assert(client.descriptors.page.listShipments.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listShipmentsStream with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listShipments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listShipmentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listShipments.createStream
                .getCall(0).calledWith(client.innerApiCalls.listShipments, request));
            assert(client.descriptors.page.listShipments.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listShipments without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Shipment()),
            ];
            client.descriptors.page.listShipments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listShipmentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listShipments.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listShipments.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listShipments with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListShipmentsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListShipmentsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listShipments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listShipmentsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listShipments.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listShipments.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('listSolutions', () => {
        (0, mocha_1.it)('invokes listSolutions without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
            ];
            client.innerApiCalls.listSolutions = stubSimpleCall(expectedResponse);
            const [response] = await client.listSolutions(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listSolutions
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSolutions
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSolutions without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
            ];
            client.innerApiCalls.listSolutions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listSolutions(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listSolutions
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSolutions
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSolutions with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listSolutions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listSolutions(request), expectedError);
            const actualRequest = client.innerApiCalls.listSolutions
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listSolutions
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSolutionsStream without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
            ];
            client.descriptors.page.listSolutions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listSolutionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listSolutions.createStream
                .getCall(0).calledWith(client.innerApiCalls.listSolutions, request));
            assert(client.descriptors.page.listSolutions.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listSolutionsStream with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSolutions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listSolutionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listSolutions.createStream
                .getCall(0).calledWith(client.innerApiCalls.listSolutions, request));
            assert(client.descriptors.page.listSolutions.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listSolutions without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Solution()),
            ];
            client.descriptors.page.listSolutions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listSolutionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listSolutions.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listSolutions.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listSolutions with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListSolutionsRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListSolutionsRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listSolutions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listSolutionsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listSolutions.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listSolutions.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('listOptimizers', () => {
        (0, mocha_1.it)('invokes listOptimizers without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
            ];
            client.innerApiCalls.listOptimizers = stubSimpleCall(expectedResponse);
            const [response] = await client.listOptimizers(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listOptimizers
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOptimizers
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOptimizers without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
            ];
            client.innerApiCalls.listOptimizers = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listOptimizers(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = client.innerApiCalls.listOptimizers
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOptimizers
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOptimizers with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.listOptimizers = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listOptimizers(request), expectedError);
            const actualRequest = client.innerApiCalls.listOptimizers
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = client.innerApiCalls.listOptimizers
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOptimizersStream without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
            ];
            client.descriptors.page.listOptimizers.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listOptimizersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listOptimizers.createStream
                .getCall(0).calledWith(client.innerApiCalls.listOptimizers, request));
            assert(client.descriptors.page.listOptimizers.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('invokes listOptimizersStream with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOptimizers.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listOptimizersStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listOptimizers.createStream
                .getCall(0).calledWith(client.innerApiCalls.listOptimizers, request));
            assert(client.descriptors.page.listOptimizers.createStream
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listOptimizers without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedResponse = [
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
                generateSampleMessage(new protos.google.cloud.optimization.v1.Optimizer()),
            ];
            client.descriptors.page.listOptimizers.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listOptimizersAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listOptimizers.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listOptimizers.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
        (0, mocha_1.it)('uses async iteration with listOptimizers with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.cloud.optimization.v1.ListOptimizersRequest());
            const defaultValue1 = getTypeDefaultValue('.google.cloud.optimization.v1.ListOptimizersRequest', ['parent']);
            request.parent = defaultValue1;
            const expectedHeaderRequestParams = `parent=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.descriptors.page.listOptimizers.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listOptimizersAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listOptimizers.asyncIterate
                .getCall(0).args[1], request);
            assert(client.descriptors.page.listOptimizers.asyncIterate
                .getCall(0).args[2].otherArgs.headers['x-goog-request-params'].includes(expectedHeaderRequestParams));
        });
    });
    (0, mocha_1.describe)('getOperation', () => {
        (0, mocha_1.it)('invokes getOperation without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const response = await client.getOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.getOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes getOperation without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            client.operationsClient.getOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.getOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.getOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes getOperation with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.getOperation(request); }, expectedError);
            assert(client.operationsClient.getOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('cancelOperation', () => {
        (0, mocha_1.it)('invokes cancelOperation without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation = stubSimpleCall(expectedResponse);
            const response = await client.cancelOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.cancelOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes cancelOperation without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.cancelOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.cancelOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.cancelOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes cancelOperation with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.CancelOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.cancelOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.cancelOperation(request); }, expectedError);
            assert(client.operationsClient.cancelOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('deleteOperation', () => {
        (0, mocha_1.it)('invokes deleteOperation without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation = stubSimpleCall(expectedResponse);
            const response = await client.deleteOperation(request);
            assert.deepStrictEqual(response, [expectedResponse]);
            assert(client.operationsClient.deleteOperation
                .getCall(0).calledWith(request));
        });
        (0, mocha_1.it)('invokes deleteOperation without error using callback', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.operationsClient.deleteOperation = sinon.stub().callsArgWith(2, null, expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.operationsClient.deleteOperation(request, undefined, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.operationsClient.deleteOperation
                .getCall(0));
        });
        (0, mocha_1.it)('invokes deleteOperation with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.DeleteOperationRequest());
            const expectedError = new Error('expected');
            client.operationsClient.deleteOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(async () => { await client.deleteOperation(request); }, expectedError);
            assert(client.operationsClient.deleteOperation
                .getCall(0).calledWith(request));
        });
    });
    (0, mocha_1.describe)('listOperationsAsync', () => {
        (0, mocha_1.it)('uses async iteration with listOperations without error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedResponse = [
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
                generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsResponse()),
            ];
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.operationsClient.listOperationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations.asyncIterate
                .getCall(0).args[1], request);
        });
        (0, mocha_1.it)('uses async iteration with listOperations with error', async () => {
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.ListOperationsRequest());
            const expectedError = new Error('expected');
            client.operationsClient.descriptor.listOperations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.operationsClient.listOperationsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.operationsClient.descriptor.listOperations.asyncIterate
                .getCall(0).args[1], request);
        });
    });
    (0, mocha_1.describe)('Path templates', () => {
        (0, mocha_1.describe)('location', () => {
            const fakePath = "/rendered/path/location";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('locationPath', () => {
                const result = client.locationPath("projectValue", "locationValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.locationPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromLocationName', () => {
                const result = client.matchProjectFromLocationName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.locationPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromLocationName', () => {
                const result = client.matchLocationFromLocationName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.locationPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('optimizer', () => {
            const fakePath = "/rendered/path/optimizer";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                optimizer: "optimizerValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.optimizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.optimizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('optimizerPath', () => {
                const result = client.optimizerPath("projectValue", "locationValue", "workspaceValue", "optimizerValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.optimizerPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromOptimizerName', () => {
                const result = client.matchProjectFromOptimizerName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromOptimizerName', () => {
                const result = client.matchLocationFromOptimizerName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromOptimizerName', () => {
                const result = client.matchWorkspaceFromOptimizerName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchOptimizerFromOptimizerName', () => {
                const result = client.matchOptimizerFromOptimizerName(fakePath);
                assert.strictEqual(result, "optimizerValue");
                assert(client.pathTemplates.optimizerPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('project', () => {
            const fakePath = "/rendered/path/project";
            const expectedParameters = {
                project: "projectValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.projectPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.projectPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('projectPath', () => {
                const result = client.projectPath("projectValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.projectPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromProjectName', () => {
                const result = client.matchProjectFromProjectName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.projectPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('shipment', () => {
            const fakePath = "/rendered/path/shipment";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                shipment: "shipmentValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shipmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shipmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('shipmentPath', () => {
                const result = client.shipmentPath("projectValue", "locationValue", "workspaceValue", "shipmentValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.shipmentPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromShipmentName', () => {
                const result = client.matchProjectFromShipmentName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromShipmentName', () => {
                const result = client.matchLocationFromShipmentName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromShipmentName', () => {
                const result = client.matchWorkspaceFromShipmentName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchShipmentFromShipmentName', () => {
                const result = client.matchShipmentFromShipmentName(fakePath);
                assert.strictEqual(result, "shipmentValue");
                assert(client.pathTemplates.shipmentPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('solution', () => {
            const fakePath = "/rendered/path/solution";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                solution: "solutionValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.solutionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.solutionPathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('solutionPath', () => {
                const result = client.solutionPath("projectValue", "locationValue", "workspaceValue", "solutionValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.solutionPathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromSolutionName', () => {
                const result = client.matchProjectFromSolutionName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromSolutionName', () => {
                const result = client.matchLocationFromSolutionName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromSolutionName', () => {
                const result = client.matchWorkspaceFromSolutionName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchSolutionFromSolutionName', () => {
                const result = client.matchSolutionFromSolutionName(fakePath);
                assert.strictEqual(result, "solutionValue");
                assert(client.pathTemplates.solutionPathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('vehicle', () => {
            const fakePath = "/rendered/path/vehicle";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
                vehicle: "vehicleValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.vehiclePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.vehiclePathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('vehiclePath', () => {
                const result = client.vehiclePath("projectValue", "locationValue", "workspaceValue", "vehicleValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.vehiclePathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromVehicleName', () => {
                const result = client.matchProjectFromVehicleName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromVehicleName', () => {
                const result = client.matchLocationFromVehicleName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromVehicleName', () => {
                const result = client.matchWorkspaceFromVehicleName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchVehicleFromVehicleName', () => {
                const result = client.matchVehicleFromVehicleName(fakePath);
                assert.strictEqual(result, "vehicleValue");
                assert(client.pathTemplates.vehiclePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
        (0, mocha_1.describe)('workspace', () => {
            const fakePath = "/rendered/path/workspace";
            const expectedParameters = {
                project: "projectValue",
                location: "locationValue",
                workspace: "workspaceValue",
            };
            const client = new statefulfleetroutingModule.v1.StatefulFleetRoutingClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.workspacePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.workspacePathTemplate.match =
                sinon.stub().returns(expectedParameters);
            (0, mocha_1.it)('workspacePath', () => {
                const result = client.workspacePath("projectValue", "locationValue", "workspaceValue");
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.workspacePathTemplate.render
                    .getCall(-1).calledWith(expectedParameters));
            });
            (0, mocha_1.it)('matchProjectFromWorkspaceName', () => {
                const result = client.matchProjectFromWorkspaceName(fakePath);
                assert.strictEqual(result, "projectValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchLocationFromWorkspaceName', () => {
                const result = client.matchLocationFromWorkspaceName(fakePath);
                assert.strictEqual(result, "locationValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
            (0, mocha_1.it)('matchWorkspaceFromWorkspaceName', () => {
                const result = client.matchWorkspaceFromWorkspaceName(fakePath);
                assert.strictEqual(result, "workspaceValue");
                assert(client.pathTemplates.workspacePathTemplate.match
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
//# sourceMappingURL=gapic_stateful_fleet_routing_v1.js.map